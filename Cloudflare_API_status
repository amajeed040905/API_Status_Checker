# CREATED BY AMMAR MAJEED FOR CFSB ON 7/14/2025

import requests
from datetime import datetime, timezone
import json

CF_status_URL = "https://www.cloudflarestatus.com/api/v2/incidents.json"

#Gets incident data from Cloudflare's API
def get_summary():
    try:
        response = requests.get(CF_status_URL, timeout=10)
        response.raise_for_status()
        data = response.json()

        #return "page" (Metadata about the status page itself)
        page_info = data.get("page", {})
        today = datetime.now(timezone.utc).date()

        incident_summaries = []
        alert_triggered = False   # Track if any problem detected

        for incident in data.get("incidents", []):
            incident_created_at = incident.get("created_at")
            if not incident_created_at:
                continue

            incident_date = datetime.fromisoformat(incident_created_at.replace("Z", "+00:00")).date()
            if incident_date != today:
                continue

            status = incident.get("status", "").lower()

            # Check if the incident status is not "resolved"
            if status != "resolved":
                alert_triggered = True
                print(f"ALERT: Cloudflare issue detected! Status: {status}")

            summary = {
                "status": status,
                "created_at": incident.get("created_at"),
                "updated_at": incident.get("updated_at"),
                "started_at": incident.get("started_at"),
                "updates": []
            }

            for update in incident.get("incident_updates", []):
                update_created_at = update.get("created_at")
                if not update_created_at:
                    continue

                update_date = datetime.fromisoformat(update_created_at.replace("Z", "+00:00")).date()
                if update_date == today:
                    summary["updates"].append({
                        "created_at": update_created_at,
                        "body": update.get("body", "")
                    })

            if summary["updates"]:
                incident_summaries.append(summary)

        if not incident_summaries:
            incident_summaries.append({
                "message": "No incidents or investigations reported today."
            })

        if alert_triggered:
            print("Cloudflare may be experiencing issues today.")
        else:
            print("Cloudflare appears operational.")

        return {
            "page": page_info,
            "incidents": incident_summaries
        }

    except requests.exceptions.Timeout:
        print("Error: Request timed out.")
    except requests.exceptions.ConnectionError:
        print("Error: Could not connect to Cloudflare.")
    except requests.exceptions.HTTPError as err:
        print(f"HTTP error: {err}")
    except Exception as e:
        print(f"Unexpected error: {e}")

if __name__ == "__main__":
    result = get_summary()
    if result:
        print(json.dumps(result, indent=2))
